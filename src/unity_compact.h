/* ==========================================
	Unity Project - A Test Framework for C
	Copyright (c) 2007-21 Mike Karlesky, Mark VanderVoord, Greg Williams, David Koch
	[Released under MIT License. Please refer to license.txt for details]
========================================== */

#ifndef UNITY_COMPACT_H
#define UNITY_COMPACT_H

/*-------------------------------------------------------
 * Test Asserts (simple)
 *-------------------------------------------------------*/

/* Boolean */
#define ASSERT(condition)															TEST_ASSERT((condition))
#define ASSERT_TRUE(condition)														TEST_ASSERT__TRUE((condition))
#define ASSERT_UNLESS(condition)													TEST_ASSERT__UNLESS((condition))
#define ASSERT_FALSE(condition)														TEST_ASSERT__FALSE((condition))

#define ASSERT_MSG(condition, message)												TEST_ASSERT__MESSAGE((condition), (message))
#define ASSERT_TRUE_MSG(condition, message)											TEST_ASSERT__TRUE_MESSAGE((condition), (message))
#define ASSERT_UNLESS_MSG(condition, message)										TEST_ASSERT__UNLESS_MESSAGE((condition), (message))
#define ASSERT_FALSE_MSG(condition, message)										TEST_ASSERT__FALSE_MESSAGE((condition), (message))

#define ASSERT_NULL(pointer)														TEST_ASSERT__NULL((pointer))
#define ASSERT_EMPTY(pointer)														TEST_ASSERT__EMPTY((pointer))
#define ASSERT_NOT_NULL(pointer)													TEST_ASSERT__NOT_NULL((pointer))
#define ASSERT_NOT_EMPTY(pointer)													TEST_ASSERT__NOT_EMPTY((pointer))

#define ASSERT_NULL_MSG(pointer, message)											TEST_ASSERT__NULL_MESSAGE((pointer), (message))
#define ASSERT_EMPTY_MSG(pointer, message)											TEST_ASSERT__EMPTY_MESSAGE((pointer), (message))
#define ASSERT_NOT_NULL_MSG(pointer, message)										TEST_ASSERT__NOT_NULL_MESSAGE((pointer), (message))
#define ASSERT_NOT_EMPTY_MSG(pointer, message)										TEST_ASSERT__NOT_EMPTY_MESSAGE((pointer), (message))

/* Integers (of all sizes) */
#define ASSERT_EQ_INT(expected, actual)												TEST_ASSERT__EQUAL__INT((expected), (actual))
#define ASSERT_EQ_INT8(expected, actual)											TEST_ASSERT__EQUAL__INT8((expected), (actual))
#define ASSERT_EQ_INT16(expected, actual)											TEST_ASSERT__EQUAL__INT16((expected), (actual))
#define ASSERT_EQ_INT32(expected, actual)											TEST_ASSERT__EQUAL__INT32((expected), (actual))
#define ASSERT_EQ_INT64(expected, actual)											TEST_ASSERT__EQUAL__INT64((expected), (actual))
#define ASSERT_EQ_UINT(expected, actual)											TEST_ASSERT__EQUAL__UINT((expected), (actual))
#define ASSERT_EQ_UINT8(expected, actual)											TEST_ASSERT__EQUAL__UINT8((expected), (actual))
#define ASSERT_EQ_UINT16(expected, actual)											TEST_ASSERT__EQUAL__UINT16((expected), (actual))
#define ASSERT_EQ_UINT32(expected, actual)											TEST_ASSERT__EQUAL__UINT32((expected), (actual))
#define ASSERT_EQ_UINT64(expected, actual)											TEST_ASSERT__EQUAL__UINT64((expected), (actual))
#define ASSERT_EQ_size_t(expected, actual)											TEST_ASSERT__EQUAL__size_t((expected), (actual))
#define ASSERT_EQ_HEX(expected, actual)												TEST_ASSERT__EQUAL__HEX((expected), (actual))
#define ASSERT_EQ_HEX8(expected, actual)											TEST_ASSERT__EQUAL__HEX8((expected), (actual))
#define ASSERT_EQ_HEX16(expected, actual)											TEST_ASSERT__EQUAL__HEX16((expected), (actual))
#define ASSERT_EQ_HEX32(expected, actual)											TEST_ASSERT__EQUAL__HEX32((expected), (actual))
#define ASSERT_EQ_HEX64(expected, actual)											TEST_ASSERT__EQUAL__HEX64((expected), (actual))
#define ASSERT_EQ_CHAR(expected, actual)											TEST_ASSERT__EQUAL__CHAR((expected), (actual))
#define ASSERT_EQ_BITS(mask, expected, actual)										TEST_ASSERT__EQUAL__BITS((mask), (expected), (actual))
#define ASSERT_EQ_BITS_HIGH(mask, actual)											TEST_ASSERT__EQUAL__BITS_HIGH((mask), (actual))
#define ASSERT_EQ_BITS_LOW(mask, actual)											TEST_ASSERT__EQUAL__BITS_LOW((mask), (actual))
#define ASSERT_EQ_BIT_HIGH(bit, actual)												TEST_ASSERT__EQUAL__BIT_HIGH((bit), (actual))
#define ASSERT_EQ_BIT_LOW(bit, actual)												TEST_ASSERT__EQUAL__BIT_LOW((bit), (actual))
#define ASSERT_EQ_FLOAT(expected, actual)											TEST_ASSERT__EQUAL__FLOAT((expected), (actual))
#define ASSERT_EQ_DOUBLE(expected, actual)											TEST_ASSERT__EQUAL__DOUBLE((expected), (actual))

#define ASSERT_EQ_INT_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__INT_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_INT8_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__INT8_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_INT16_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__INT16_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_INT32_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__INT32_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_INT64_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__INT64_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_UINT_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__UINT_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_UINT8_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__UINT8_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_UINT16_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__UINT16_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_UINT32_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__UINT32_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_UINT64_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__UINT64_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_size_t_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__size_t_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_HEX_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__HEX_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_HEX8_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__HEX8_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_HEX16_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__HEX16_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_HEX32_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__HEX32_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_HEX64_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__HEX64_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_BITS_MSG(mask, expected, actual, message)							TEST_ASSERT__EQUAL__BITS_MESSAGE((mask), (expected), (actual), (message))
#define ASSERT_EQ_BITS_HIGH_MSG(mask, actual, message)								TEST_ASSERT__EQUAL__BITS_HIGH_MESSAGE((mask), (actual), (message))
#define ASSERT_EQ_BITS_LOW_MSG(mask, actual, message)								TEST_ASSERT__EQUAL__BITS_LOW_MESSAGE((mask), (actual), (message))
#define ASSERT_EQ_BIT_HIGH_MSG(bit, actual, message)								TEST_ASSERT__EQUAL__BIT_HIGH_MESSAGE((bit), (actual), (message))
#define ASSERT_EQ_BIT_LOW_MSG(bit, actual, message)									TEST_ASSERT__EQUAL__BIT_LOW_MESSAGE((bit), (actual), (message))
#define ASSERT_EQ_CHAR_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__CHAR_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_FLOAT_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__FLOAT_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_DOUBLE_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__DOUBLE_MESSAGE((expected), (actual), (message))

/* Structs and Strings */
#define ASSERT_EQ_PTR(expected, actual)												TEST_ASSERT__EQUAL__PTR((expected), (actual))
#define ASSERT_EQ_STRING(expected, actual)											TEST_ASSERT__EQUAL__STRING((expected), (actual))
#define ASSERT_EQ_STRING_LEN(expected, actual, len)									TEST_ASSERT__EQUAL__STRING_LEN((expected), (actual), (len))
#define ASSERT_EQ_MEMORY(expected, actual, len)										TEST_ASSERT__EQUAL__MEMORY((expected), (actual), (len))

#define ASSERT_EQ_PTR_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__PTR_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_STRING_MSG(expected, actual, message)								TEST_ASSERT__EQUAL__STRING_MESSAGE((expected), (actual), (message))
#define ASSERT_EQ_STRING_LEN_MSG(expected, actual, len, message)					TEST_ASSERT__EQUAL__STRING_LEN_MESSAGE((expected), (actual), (len), (message))
#define ASSERT_EQ_MEMORY_MSG(expected, actual, len, message)						TEST_ASSERT__EQUAL__MEMORY_MESSAGE((expected), (actual), (len), (message))

/* Arrays */
#define ASSERT_EQ_ARR_INT(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__INT((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_INT8(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__INT8((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_INT16(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__INT16((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_INT32(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__INT32((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_INT64(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__INT64((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_UINT(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__UINT((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_UINT8(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__UINT8((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_UINT16(expected, actual, num_elements)						TEST_ASSERT__EQUAL_ARRAY__UINT16((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_UINT32(expected, actual, num_elements)						TEST_ASSERT__EQUAL_ARRAY__UINT32((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_UINT64(expected, actual, num_elements)						TEST_ASSERT__EQUAL_ARRAY__UINT64((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_size_t(expected, actual, num_elements)						TEST_ASSERT__EQUAL_ARRAY__size_t((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_HEX(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__HEX((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_HEX8(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__HEX8((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_HEX16(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__HEX16((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_HEX32(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__HEX32((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_HEX64(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__HEX64((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_PTR(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__PTR((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_STRING(expected, actual, num_elements)						TEST_ASSERT__EQUAL_ARRAY__STRING((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_MEMORY(expected, actual, len, num_elements)					TEST_ASSERT__EQUAL_ARRAY__MEMORY((expected), (actual), (len), (num_elements))
#define ASSERT_EQ_ARR_CHAR(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__CHAR((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_FLOAT(expected, actual, num_elements)							TEST_ASSERT__EQUAL_ARRAY__FLOAT((expected), (actual), (num_elements))
#define ASSERT_EQ_ARR_DOUBLE(expected, actual, num_elements)						TEST_ASSERT__EQUAL_ARRAY__DOUBLE((expected), (actual), (num_elements))

#define ASSERT_EQ_ARR_INT_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__INT_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_INT8_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__INT8_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_INT16_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__INT16_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_INT32_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__INT32_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_INT64_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__INT64_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_UINT_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__UINT_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_UINT8_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__UINT8_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_UINT16_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__UINT16_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_UINT32_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__UINT32_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_UINT64_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__UINT64_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_size_t_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__size_t_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_HEX_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__HEX_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_HEX8_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__HEX8_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_HEX16_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__HEX16_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_HEX32_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__HEX32_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_HEX64_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__HEX64_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_PTR_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__PTR_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_STRING_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__STRING_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_MEMORY_MSG(expected, actual, len, num_elements, message)		TEST_ASSERT__EQUAL_ARRAY__MEMORY_MESSAGE((expected), (actual), (len), (num_elements), (message))
#define ASSERT_EQ_ARR_CHAR_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__CHAR_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_FLOAT_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__FLOAT_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ARR_DOUBLE_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_ARRAY__DOUBLE_MESSAGE((expected), (actual), (num_elements), (message))

/* Arrays Compared To Single Value */
#define ASSERT_EQ_ALL_INT(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__INT((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_INT8(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__INT8((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_INT16(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__INT16((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_INT32(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__INT32((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_INT64(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__INT64((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_UINT(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__UINT((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_UINT8(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__UINT8((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_UINT16(expected, actual, num_elements)						TEST_ASSERT__EQUAL_EACH__UINT16((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_UINT32(expected, actual, num_elements)						TEST_ASSERT__EQUAL_EACH__UINT32((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_UINT64(expected, actual, num_elements)						TEST_ASSERT__EQUAL_EACH__UINT64((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_size_t(expected, actual, num_elements)						TEST_ASSERT__EQUAL_EACH__size_t((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_HEX(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__HEX((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_HEX8(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__HEX8((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_HEX16(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__HEX16((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_HEX32(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__HEX32((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_HEX64(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__HEX64((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_PTR(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__PTR((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_STRING(expected, actual, num_elements)						TEST_ASSERT__EQUAL_EACH__STRING((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_MEMORY(expected, actual, len, num_elements)					TEST_ASSERT__EQUAL_EACH__MEMORY((expected), (actual), (len), (num_elements))
#define ASSERT_EQ_ALL_CHAR(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__CHAR((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_FLOAT(expected, actual, num_elements)							TEST_ASSERT__EQUAL_EACH__FLOAT((expected), (actual), (num_elements))
#define ASSERT_EQ_ALL_DOUBLE(expected, actual, num_elements)						TEST_ASSERT__EQUAL_EACH__DOUBLE((expected), (actual), (num_elements))

#define ASSERT_EQ_ALL_INT_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__INT_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_INT8_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__INT8_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_INT16_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__INT16_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_INT32_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__INT32_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_INT64_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__INT64_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_UINT_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__UINT_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_UINT8_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__UINT8_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_UINT16_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__UINT16_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_UINT32_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__UINT32_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_UINT64_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__UINT64_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_size_t_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__size_t_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_HEX_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__HEX_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_HEX8_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__HEX8_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_HEX16_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__HEX16_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_HEX32_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__HEX32_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_HEX64_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__HEX64_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_PTR_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__PTR_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_STRING_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__STRING_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_MEMORY_MSG(expected, actual, len, num_elements, message)		TEST_ASSERT__EQUAL_EACH__MEMORY_MESSAGE((expected), (actual), (len), (num_elements), (message))
#define ASSERT_EQ_ALL_CHAR_MSG(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__CHAR_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_FLOAT_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__FLOAT_MESSAGE((expected), (actual), (num_elements), (message))
#define ASSERT_EQ_ALL_DOUBLE_MSG(expected, actual, num_elements, message)			TEST_ASSERT__EQUAL_EACH__DOUBLE_MESSAGE((expected), (actual), (num_elements), (message))

/* Integer Not Equal To (of all sizes) */
#define ASSERT_NE_INT(threshold, actual)											TEST_ASSERT__NOT_EQUAL__INT((threshold), (actual))
#define ASSERT_NE_INT8(threshold, actual)											TEST_ASSERT__NOT_EQUAL__INT8((threshold), (actual))
#define ASSERT_NE_INT16(threshold, actual)											TEST_ASSERT__NOT_EQUAL__INT16((threshold), (actual))
#define ASSERT_NE_INT32(threshold, actual)											TEST_ASSERT__NOT_EQUAL__INT32((threshold), (actual))
#define ASSERT_NE_INT64(threshold, actual)											TEST_ASSERT__NOT_EQUAL__INT64((threshold), (actual))
#define ASSERT_NE_UINT(threshold, actual)											TEST_ASSERT__NOT_EQUAL__UINT((threshold), (actual))
#define ASSERT_NE_UINT8(threshold, actual)											TEST_ASSERT__NOT_EQUAL__UINT8((threshold), (actual))
#define ASSERT_NE_UINT16(threshold, actual)											TEST_ASSERT__NOT_EQUAL__UINT16((threshold), (actual))
#define ASSERT_NE_UINT32(threshold, actual)											TEST_ASSERT__NOT_EQUAL__UINT32((threshold), (actual))
#define ASSERT_NE_UINT64(threshold, actual)											TEST_ASSERT__NOT_EQUAL__UINT64((threshold), (actual))
#define ASSERT_NE_size_t(threshold, actual)											TEST_ASSERT__NOT_EQUAL__size_t((threshold), (actual))
#define ASSERT_NE_HEX8(threshold, actual)											TEST_ASSERT__NOT_EQUAL__HEX8((threshold), (actual))
#define ASSERT_NE_HEX16(threshold, actual)											TEST_ASSERT__NOT_EQUAL__HEX16((threshold), (actual))
#define ASSERT_NE_HEX32(threshold, actual)											TEST_ASSERT__NOT_EQUAL__HEX32((threshold), (actual))
#define ASSERT_NE_HEX64(threshold, actual)											TEST_ASSERT__NOT_EQUAL__HEX64((threshold), (actual))
#define ASSERT_NE_CHAR(threshold, actual)											TEST_ASSERT__NOT_EQUAL__CHAR((threshold), (actual))

#define ASSERT_NE_INT_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_INT8_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_INT16_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_INT32_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_INT64_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_UINT_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__UINT_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_UINT8_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__UINT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_UINT16_MSG(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__UINT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_UINT32_MSG(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__UINT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_UINT64_MSG(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__UINT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_size_t_MSG(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__size_t_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_HEX8_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX8_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_HEX16_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX16_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_HEX32_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX32_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_HEX64_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX64_MESSAGE((threshold), (actual), (message))
#define ASSERT_NE_CHAR_MSG(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__CHAR_MESSAGE((threshold), (actual), (message))

/* Integer Greater Than (of all sizes) */
#define ASSERT_GT(threshold, actual)												TEST_ASSERT__GREATER_THAN((threshold), (actual))
#define ASSERT_GT_INT(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT((threshold), (actual))
#define ASSERT_GT_INT8(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT8((threshold), (actual))
#define ASSERT_GT_INT16(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT16((threshold), (actual))
#define ASSERT_GT_INT32(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT32((threshold), (actual))
#define ASSERT_GT_INT64(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT64((threshold), (actual))
#define ASSERT_GT_UINT(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT((threshold), (actual))
#define ASSERT_GT_UINT8(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT8((threshold), (actual))
#define ASSERT_GT_UINT16(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT16((threshold), (actual))
#define ASSERT_GT_UINT32(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT32((threshold), (actual))
#define ASSERT_GT_UINT64(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT64((threshold), (actual))
#define ASSERT_GT_size_t(threshold, actual)											TEST_ASSERT__GREATER_THAN__size_t((threshold), (actual))
#define ASSERT_GT_HEX8(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX8((threshold), (actual))
#define ASSERT_GT_HEX16(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX16((threshold), (actual))
#define ASSERT_GT_HEX32(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX32((threshold), (actual))
#define ASSERT_GT_HEX64(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX64((threshold), (actual))
#define ASSERT_GT_CHAR(threshold, actual)											TEST_ASSERT__GREATER_THAN__CHAR((threshold), (actual))

#define ASSERT_GT_MSG(threshold, actual, message)									TEST_ASSERT__GREATER_THAN__MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_INT_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__INT_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_INT8_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__INT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_INT16_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__INT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_INT32_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__INT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_INT64_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__INT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_UINT_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__UINT_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_UINT8_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__UINT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_UINT16_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_UINT32_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_UINT64_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_size_t_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__size_t_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_HEX8_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__HEX8_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_HEX16_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__HEX16_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_HEX32_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__HEX32_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_HEX64_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__HEX64_MESSAGE((threshold), (actual), (message))
#define ASSERT_GT_CHAR_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__CHAR_MESSAGE((threshold), (actual), (message))

/* Integer Less Than (of all sizes) */
#define ASSERT_LT(threshold, actual)												TEST_ASSERT__LESS_THAN((threshold), (actual))
#define ASSERT_LT_INT(threshold, actual)											TEST_ASSERT__LESS_THAN__INT((threshold), (actual))
#define ASSERT_LT_INT8(threshold, actual)											TEST_ASSERT__LESS_THAN__INT8((threshold), (actual))
#define ASSERT_LT_INT16(threshold, actual)											TEST_ASSERT__LESS_THAN__INT16((threshold), (actual))
#define ASSERT_LT_INT32(threshold, actual)											TEST_ASSERT__LESS_THAN__INT32((threshold), (actual))
#define ASSERT_LT_INT64(threshold, actual)											TEST_ASSERT__LESS_THAN__INT64((threshold), (actual))
#define ASSERT_LT_UINT(threshold, actual)											TEST_ASSERT__LESS_THAN__UINT((threshold), (actual))
#define ASSERT_LT_UINT8(threshold, actual)											TEST_ASSERT__LESS_THAN__UINT8((threshold), (actual))
#define ASSERT_LT_UINT16(threshold, actual)											TEST_ASSERT__LESS_THAN__UINT16((threshold), (actual))
#define ASSERT_LT_UINT32(threshold, actual)											TEST_ASSERT__LESS_THAN__UINT32((threshold), (actual))
#define ASSERT_LT_UINT64(threshold, actual)											TEST_ASSERT__LESS_THAN__UINT64((threshold), (actual))
#define ASSERT_LT_size_t(threshold, actual)											TEST_ASSERT__LESS_THAN__size_t((threshold), (actual))
#define ASSERT_LT_HEX8(threshold, actual)											TEST_ASSERT__LESS_THAN__HEX8((threshold), (actual))
#define ASSERT_LT_HEX16(threshold, actual)											TEST_ASSERT__LESS_THAN__HEX16((threshold), (actual))
#define ASSERT_LT_HEX32(threshold, actual)											TEST_ASSERT__LESS_THAN__HEX32((threshold), (actual))
#define ASSERT_LT_HEX64(threshold, actual)											TEST_ASSERT__LESS_THAN__HEX64((threshold), (actual))
#define ASSERT_LT_CHAR(threshold, actual)											TEST_ASSERT__LESS_THAN__CHAR((threshold), (actual))

#define ASSERT_LT_MSG(threshold, actual, message)									TEST_ASSERT__LESS_THAN__MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_INT_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_INT8_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_INT16_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_INT32_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_INT64_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_UINT_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__UINT_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_UINT8_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__UINT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_UINT16_MSG(threshold, actual, message)							TEST_ASSERT__LESS_THAN__UINT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_UINT32_MSG(threshold, actual, message)							TEST_ASSERT__LESS_THAN__UINT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_UINT64_MSG(threshold, actual, message)							TEST_ASSERT__LESS_THAN__UINT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_size_t_MSG(threshold, actual, message)							TEST_ASSERT__LESS_THAN__size_t_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_HEX8_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX8_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_HEX16_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX16_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_HEX32_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX32_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_HEX64_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX64_MESSAGE((threshold), (actual), (message))
#define ASSERT_LT_CHAR_MSG(threshold, actual, message)								TEST_ASSERT__LESS_THAN__CHAR_MESSAGE((threshold), (actual), (message))

/* Integer Greater Or Equal (of all sizes) */
#define ASSERT_GE(threshold, actual)												TEST_ASSERT__GREATER_OR_EQUAL((threshold), (actual))
#define ASSERT_GE_INT(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__INT((threshold), (actual))
#define ASSERT_GE_INT8(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__INT8((threshold), (actual))
#define ASSERT_GE_INT16(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__INT16((threshold), (actual))
#define ASSERT_GE_INT32(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__INT32((threshold), (actual))
#define ASSERT_GE_INT64(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__INT64((threshold), (actual))
#define ASSERT_GE_UINT(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__UINT((threshold), (actual))
#define ASSERT_GE_UINT8(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__UINT8((threshold), (actual))
#define ASSERT_GE_UINT16(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__UINT16((threshold), (actual))
#define ASSERT_GE_UINT32(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__UINT32((threshold), (actual))
#define ASSERT_GE_UINT64(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__UINT64((threshold), (actual))
#define ASSERT_GE_size_t(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__size_t((threshold), (actual))
#define ASSERT_GE_HEX8(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__HEX8((threshold), (actual))
#define ASSERT_GE_HEX16(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__HEX16((threshold), (actual))
#define ASSERT_GE_HEX32(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__HEX32((threshold), (actual))
#define ASSERT_GE_HEX64(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__HEX64((threshold), (actual))
#define ASSERT_GE_CHAR(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__CHAR((threshold), (actual))

#define ASSERT_GE_MSG(threshold, actual, message)									TEST_ASSERT__GREATER_OR_EQUAL__MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_INT_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__INT_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_INT8_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__INT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_INT16_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__INT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_INT32_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__INT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_INT64_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__INT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_UINT_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__UINT_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_UINT8_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__UINT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_UINT16_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_OR_EQUAL__UINT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_UINT32_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_OR_EQUAL__UINT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_UINT64_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_OR_EQUAL__UINT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_size_t_MSG(threshold, actual, message)							TEST_ASSERT__GREATER_OR_EQUAL__size_t_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_HEX8_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__HEX8_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_HEX16_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__HEX16_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_HEX32_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__HEX32_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_HEX64_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__HEX64_MESSAGE((threshold), (actual), (message))
#define ASSERT_GE_CHAR_MSG(threshold, actual, message)								TEST_ASSERT__GREATER_OR_EQUAL__CHAR_MESSAGE((threshold), (actual), (message))

/* Integer Less Or Equal (of all sizes) */
#define ASSERT_LE(threshold, actual)												TEST_ASSERT__LESS_OR_EQUAL((threshold), (actual))
#define ASSERT_LE_INT(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT((threshold), (actual))
#define ASSERT_LE_INT8(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT8((threshold), (actual))
#define ASSERT_LE_INT16(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT16((threshold), (actual))
#define ASSERT_LE_INT32(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT32((threshold), (actual))
#define ASSERT_LE_INT64(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT64((threshold), (actual))
#define ASSERT_LE_UINT(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT((threshold), (actual))
#define ASSERT_LE_UINT8(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT8((threshold), (actual))
#define ASSERT_LE_UINT16(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT16((threshold), (actual))
#define ASSERT_LE_UINT32(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT32((threshold), (actual))
#define ASSERT_LE_UINT64(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT64((threshold), (actual))
#define ASSERT_LE_size_t(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__size_t((threshold), (actual))
#define ASSERT_LE_HEX8(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX8((threshold), (actual))
#define ASSERT_LE_HEX16(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX16((threshold), (actual))
#define ASSERT_LE_HEX32(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX32((threshold), (actual))
#define ASSERT_LE_HEX64(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX64((threshold), (actual))
#define ASSERT_LE_CHAR(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__CHAR((threshold), (actual))

#define ASSERT_LE_MSG(threshold, actual, message)									TEST_ASSERT__LESS_OR_EQUAL__MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_INT_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__INT_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_INT8_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__INT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_INT16_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__INT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_INT32_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__INT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_INT64_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__INT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_UINT_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__UINT_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_UINT8_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__UINT8_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_UINT16_MSG(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__UINT16_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_UINT32_MSG(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__UINT32_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_UINT64_MSG(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__UINT64_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_size_t_MSG(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__size_t_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_HEX8_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__HEX8_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_HEX16_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__HEX16_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_HEX32_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__HEX32_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_HEX64_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__HEX64_MESSAGE((threshold), (actual), (message))
#define ASSERT_LE_CHAR_MSG(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__CHAR_MESSAGE((threshold), (actual), (message))

/* Integer Ranges (of all sizes) */
#define ASSERT_IN_INT(delta, expected, actual)										TEST_ASSERT__WITHIN__INT((delta), (expected), (actual))
#define ASSERT_IN_INT8(delta, expected, actual)										TEST_ASSERT__WITHIN__INT8((delta), (expected), (actual))
#define ASSERT_IN_INT16(delta, expected, actual)									TEST_ASSERT__WITHIN__INT16((delta), (expected), (actual))
#define ASSERT_IN_INT32(delta, expected, actual)									TEST_ASSERT__WITHIN__INT32((delta), (expected), (actual))
#define ASSERT_IN_INT64(delta, expected, actual)									TEST_ASSERT__WITHIN__INT64((delta), (expected), (actual))
#define ASSERT_IN_UINT(delta, expected, actual)										TEST_ASSERT__WITHIN__UINT((delta), (expected), (actual))
#define ASSERT_IN_UINT8(delta, expected, actual)									TEST_ASSERT__WITHIN__UINT8((delta), (expected), (actual))
#define ASSERT_IN_UINT16(delta, expected, actual)									TEST_ASSERT__WITHIN__UINT16((delta), (expected), (actual))
#define ASSERT_IN_UINT32(delta, expected, actual)									TEST_ASSERT__WITHIN__UINT32((delta), (expected), (actual))
#define ASSERT_IN_UINT64(delta, expected, actual)									TEST_ASSERT__WITHIN__UINT64((delta), (expected), (actual))
#define ASSERT_IN_size_t(delta, expected, actual)									TEST_ASSERT__WITHIN__size_t((delta), (expected), (actual))
#define ASSERT_IN_HEX(delta, expected, actual)										TEST_ASSERT__WITHIN__HEX((delta), (expected), (actual))
#define ASSERT_IN_HEX8(delta, expected, actual)										TEST_ASSERT__WITHIN__HEX8((delta), (expected), (actual))
#define ASSERT_IN_HEX16(delta, expected, actual)									TEST_ASSERT__WITHIN__HEX16((delta), (expected), (actual))
#define ASSERT_IN_HEX32(delta, expected, actual)									TEST_ASSERT__WITHIN__HEX32((delta), (expected), (actual))
#define ASSERT_IN_HEX64(delta, expected, actual)									TEST_ASSERT__WITHIN__HEX64((delta), (expected), (actual))
#define ASSERT_IN_CHAR(delta, expected, actual)										TEST_ASSERT__WITHIN__CHAR((delta), (expected), (actual))
#define ASSERT_IN_FLOAT(delta, expected, actual)									TEST_ASSERT__WITHIN__FLOAT((delta), (expected), (actual))
#define ASSERT_IN_DOUBLE(delta, expected, actual)									TEST_ASSERT__WITHIN__DOUBLE((delta), (expected), (actual))

#define ASSERT_IN_INT_MSG(delta, expected, actual, message)							TEST_ASSERT__WITHIN__INT_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_INT8_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__INT8_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_INT16_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__INT16_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_INT32_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__INT32_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_INT64_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__INT64_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_UINT_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__UINT_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_UINT8_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__UINT8_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_UINT16_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__UINT16_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_UINT32_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__UINT32_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_UINT64_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__UINT64_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_size_t_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__size_t_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_HEX_MSG(delta, expected, actual, message)							TEST_ASSERT__WITHIN__HEX_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_HEX8_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__HEX8_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_HEX16_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__HEX16_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_HEX32_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__HEX32_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_HEX64_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__HEX64_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_CHAR_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__CHAR_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_FLOAT_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__FLOAT_MESSAGE((delta), (expected), (actual), (message))
#define ASSERT_IN_DOUBLE_MSG(delta, expected, actual, message)						TEST_ASSERT__WITHIN__DOUBLE_MESSAGE((delta), (expected), (actual), (message))

/* Integer Array Ranges (of all sizes) */
#define ASSERT_IN_ARR_INT(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__INT((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_INT8(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__INT8((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_INT16(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__INT16((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_INT32(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__INT32((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_INT64(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__INT64((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_UINT(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__UINT((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_UINT8(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__UINT8((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_UINT16(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__UINT16((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_UINT32(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__UINT32((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_UINT64(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__UINT64((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_size_t(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__size_t((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_HEX(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__HEX((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_HEX8(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__HEX8((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_HEX16(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__HEX16((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_HEX32(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__HEX32((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_HEX64(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__HEX64((delta), (expected), (actual), (num_elements))
#define ASSERT_IN_ARR_CHAR(delta, expected, actual, num_elements)					TEST_ASSERT__WITHIN_ARRAY__CHAR((delta), (expected), (actual), (num_elements))

#define ASSERT_IN_ARR_INT_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_INT8_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT8_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_INT16_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT16_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_INT32_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT32_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_INT64_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT64_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_UINT_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__UINT_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_UINT8_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__UINT8_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_UINT16_MSG(delta, expected, actual, num_elements, message)	TEST_ASSERT__WITHIN_ARRAY__UINT16_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_UINT32_MSG(delta, expected, actual, num_elements, message)	TEST_ASSERT__WITHIN_ARRAY__UINT32_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_UINT64_MSG(delta, expected, actual, num_elements, message) 	TEST_ASSERT__WITHIN_ARRAY__UINT64_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_size_t_MSG(delta, expected, actual, num_elements, message)	TEST_ASSERT__WITHIN_ARRAY__size_t_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_HEX_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_HEX8_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX8_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_HEX16_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX16_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_HEX32_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX32_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_HEX64_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX64_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define ASSERT_IN_ARR_CHAR_MSG(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__CHAR_MESSAGE((delta), (expected), (actual), (num_elements), (message))

/* Floating Point (If Enabled) */
#define ASSERT_FLOAT_IS_INF(actual)													TEST_ASSERT__FLOAT__IS_INF((actual))
#define ASSERT_FLOAT_IS_NEG_INF(actual)												TEST_ASSERT__FLOAT__IS_NEG_INF((actual))
#define ASSERT_FLOAT_IS_NAN(actual)													TEST_ASSERT__FLOAT__IS_NAN((actual))
#define ASSERT_FLOAT_IS_DET(actual)													TEST_ASSERT__FLOAT__IS_DETERMINATE((actual))
#define ASSERT_FLOAT_IS_NOT_INF(actual)												TEST_ASSERT__FLOAT__IS_NOT_INF((actual))
#define ASSERT_FLOAT_IS_NOT_NEG_INF(actual)											TEST_ASSERT__FLOAT__IS_NOT_NEG_INF((actual))
#define ASSERT_FLOAT_IS_NOT_NAN(actual)												TEST_ASSERT__FLOAT__IS_NOT_NAN((actual))
#define ASSERT_FLOAT_IS_NOT_DET(actual)												TEST_ASSERT__FLOAT__IS_NOT_DETERMINATE((actual))

#define ASSERT_FLOAT_IS_INF_MSG(actual, message)									TEST_ASSERT__FLOAT__IS_INF_MESSAGE((actual), (message))
#define ASSERT_FLOAT_IS_NEG_INF_MSG(actual, message)								TEST_ASSERT__FLOAT__IS_NEG_INF_MESSAGE((actual), (message))
#define ASSERT_FLOAT_IS_NAN_MSG(actual, message)									TEST_ASSERT__FLOAT__IS_NAN_MESSAGE((actual), (message))
#define ASSERT_FLOAT_IS_DET_MSG(actual, message)									TEST_ASSERT__FLOAT__IS_DETERMINATE_MESSAGE((actual), (message))
#define ASSERT_FLOAT_IS_NOT_INF_MSG(actual, message)								TEST_ASSERT__FLOAT__IS_NOT_INF_MESSAGE((actual), (message))
#define ASSERT_FLOAT_IS_NOT_NEG_INF_MSG(actual, message)							TEST_ASSERT__FLOAT__IS_NOT_NEG_INF_MESSAGE((actual), (message))
#define ASSERT_FLOAT_IS_NOT_NAN_MSG(actual, message)								TEST_ASSERT__FLOAT__IS_NOT_NAN_MESSAGE((actual), (message))
#define ASSERT_FLOAT_IS_NOT_DET_MSG(actual, message)								TEST_ASSERT__FLOAT__IS_NOT_DETERMINATE_MESSAGE((actual), (message))

/* Double (If Enabled) */
#define ASSERT_DOUBLE_IS_INF(actual)												TEST_ASSERT__DOUBLE__IS_INF((actual))
#define ASSERT_DOUBLE_IS_NEG_INF(actual)											TEST_ASSERT__DOUBLE__IS_NEG_INF((actual))
#define ASSERT_DOUBLE_IS_NAN(actual)												TEST_ASSERT__DOUBLE__IS_NAN((actual))
#define ASSERT_DOUBLE_IS_DET(actual)												TEST_ASSERT__DOUBLE__IS_DETERMINATE((actual))
#define ASSERT_DOUBLE_IS_NOT_INF(actual)											TEST_ASSERT__DOUBLE__IS_NOT_INF((actual))
#define ASSERT_DOUBLE_IS_NOT_NEG_INF(actual)										TEST_ASSERT__DOUBLE__IS_NOT_NEG_INF((actual))
#define ASSERT_DOUBLE_IS_NOT_NAN(actual)											TEST_ASSERT__DOUBLE__IS_NOT_NAN((actual))
#define ASSERT_DOUBLE_IS_NOT_DET(actual)											TEST_ASSERT__DOUBLE__IS_NOT_DETERMINATE((actual))

#define ASSERT_DOUBLE_IS_INF_MSG(actual, message)									TEST_ASSERT__DOUBLE__IS_INF_MESSAGE((actual), (message))
#define ASSERT_DOUBLE_IS_NEG_INF_MSG(actual, message)								TEST_ASSERT__DOUBLE__IS_NEG_INF_MESSAGE((actual), (message))
#define ASSERT_DOUBLE_IS_NAN_MSG(actual, message)									TEST_ASSERT__DOUBLE__IS_NAN_MESSAGE((actual), (message))
#define ASSERT_DOUBLE_IS_DET_MSG(actual, message)									TEST_ASSERT__DOUBLE__IS_DETERMINATE_MESSAGE((actual), (message))
#define ASSERT_DOUBLE_IS_NOT_INF_MSG(actual, message)								TEST_ASSERT__DOUBLE__IS_NOT_INF_MESSAGE((actual), (message))
#define ASSERT_DOUBLE_IS_NOT_NEG_INF_MSG(actual, message)							TEST_ASSERT__DOUBLE__IS_NOT_NEG_INF_MESSAGE((actual), (message))
#define ASSERT_DOUBLE_IS_NOT_NAN_MSG(actual, message)								TEST_ASSERT__DOUBLE__IS_NOT_NAN_MESSAGE((actual), (message))
#define ASSERT_DOUBLE_IS_NOT_DET_MSG(actual, message)								TEST_ASSERT__DOUBLE__IS_NOT_DETERMINATE_MESSAGE((actual), (message))

/* Shorthand */
#ifdef UNITY_SHORTHAND_AS_OLD
#define ASSERT_EQ(expected, actual)													TEST_ASSERT__EQUAL((expected), (actual))
#define ASSERT_NE(expected, actual)													TEST_ASSERT__NOT_EQUAL((expected), (actual))

#define ASSERT_EQ_MSG(expected, actual, message)									TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define ASSERT_NE_MSG(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_OLD */
#ifdef UNITY_SHORTHAND_AS_INT
#define ASSERT_EQ(expected, actual)													TEST_ASSERT__EQUAL((expected), (actual))
#define ASSERT_NE(expected, actual)													TEST_ASSERT__NOT_EQUAL((expected), (actual))

#define ASSERT_EQ_MSG(expected, actual, message)									TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define ASSERT_NE_MSG(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_INT */
#ifdef UNITY_SHORTHAND_AS_MEM
#define ASSERT_EQ(expected, actual)													TEST_ASSERT__EQUAL((expected), (actual))
#define ASSERT_NE(expected, actual)													TEST_ASSERT__NOT_EQUAL((expected), (actual))

#define ASSERT_EQ_MSG(expected, actual, message)									TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define ASSERT_NE_MSG(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_MEM */
#ifdef UNITY_SHORTHAND_AS_RAW
#define ASSERT_EQ(expected, actual)													TEST_ASSERT__EQUAL((expected), (actual))
#define ASSERT_NE(expected, actual)													TEST_ASSERT__NOT_EQUAL((expected), (actual))

#define ASSERT_EQ_MSG(expected, actual, message)									TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define ASSERT_NE_MSG(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_RAW */
#ifdef UNITY_SHORTHAND_AS_NONE
#define ASSERT_EQ(expected, actual)													TEST_ASSERT__EQUAL((expected), (actual))
#define ASSERT_NE(expected, actual)													TEST_ASSERT__NOT_EQUAL((expected), (actual))

#define ASSERT_EQ_MSG(expected, actual, message)									TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define ASSERT_NE_MSG(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_NONE */

#ifdef __cplusplus
}
#endif	/* __cplusplus */

#endif	/* UNITY_COMPACT_H */
