/* ==========================================
	Unity Project - A Test Framework for C
	Copyright (c) 2007-21 Mike Karlesky, Mark VanderVoord, Greg Williams, David Koch
	[Released under MIT License. Please refer to license.txt for details]
========================================== */

#ifndef UNITY_LEGACY_H
#define UNITY_LEGACY_H

/*-------------------------------------------------------
 * Test Asserts (simple)
 *-------------------------------------------------------*/

/* Boolean */
#define TEST_ASSERT_TRUE(condition)																	TEST_ASSERT__TRUE((condition))
#define TEST_ASSERT_UNLESS(condition)																TEST_ASSERT__UNLESS((condition))
#define TEST_ASSERT_FALSE(condition)																TEST_ASSERT__FALSE((condition))
#define TEST_ASSERT_NULL(pointer)																	TEST_ASSERT__NULL((pointer))
#define TEST_ASSERT_NOT_NULL(pointer)																TEST_ASSERT__NOT_NULL((pointer))
#define TEST_ASSERT_EMPTY(pointer)																	TEST_ASSERT__EMPTY((pointer))
#define TEST_ASSERT_NOT_EMPTY(pointer)																TEST_ASSERT__NOT_EMPTY((pointer))

/* Integers (of all sizes) */
#define TEST_ASSERT_EQUAL_INT(expected, actual)														TEST_ASSERT__EQUAL__INT((expected), (actual))
#define TEST_ASSERT_EQUAL_INT8(expected, actual)													TEST_ASSERT__EQUAL__INT8((expected), (actual))
#define TEST_ASSERT_EQUAL_INT16(expected, actual)													TEST_ASSERT__EQUAL__INT16((expected), (actual))
#define TEST_ASSERT_EQUAL_INT32(expected, actual)													TEST_ASSERT__EQUAL__INT32((expected), (actual))
#define TEST_ASSERT_EQUAL_INT64(expected, actual)													TEST_ASSERT__EQUAL__INT64((expected), (actual))
#define TEST_ASSERT_EQUAL_UINT(expected, actual)													TEST_ASSERT__EQUAL__UINT((expected), (actual))
#define TEST_ASSERT_EQUAL_UINT8(expected, actual)													TEST_ASSERT__EQUAL__UINT8((expected), (actual))
#define TEST_ASSERT_EQUAL_UINT16(expected, actual)													TEST_ASSERT__EQUAL__UINT16((expected), (actual))
#define TEST_ASSERT_EQUAL_UINT32(expected, actual)													TEST_ASSERT__EQUAL__UINT32((expected), (actual))
#define TEST_ASSERT_EQUAL_UINT64(expected, actual)													TEST_ASSERT__EQUAL__UINT64((expected), (actual))
#define TEST_ASSERT_EQUAL_size_t(expected, actual)													TEST_ASSERT__EQUAL__size_t((expected), (actual))
#define TEST_ASSERT_EQUAL_HEX(expected, actual)														TEST_ASSERT__EQUAL__HEX((expected), (actual))
#define TEST_ASSERT_EQUAL_HEX8(expected, actual)													TEST_ASSERT__EQUAL__HEX8((expected), (actual))
#define TEST_ASSERT_EQUAL_HEX16(expected, actual)													TEST_ASSERT__EQUAL__HEX16((expected), (actual))
#define TEST_ASSERT_EQUAL_HEX32(expected, actual)													TEST_ASSERT__EQUAL__HEX32((expected), (actual))
#define TEST_ASSERT_EQUAL_HEX64(expected, actual)													TEST_ASSERT__EQUAL__HEX64((expected), (actual))
#define TEST_ASSERT_EQUAL_CHAR(expected, actual)													TEST_ASSERT__EQUAL__CHAR((expected), (actual))
#define TEST_ASSERT_BITS(mask, expected, actual)													TEST_ASSERT__EQUAL__BITS((mask), (expected), (actual))
#define TEST_ASSERT_BITS_HIGH(mask, actual)															TEST_ASSERT__EQUAL__BITS_HIGH((mask), (actual))
#define TEST_ASSERT_BITS_LOW(mask, actual)															TEST_ASSERT__EQUAL__BITS_LOW((mask), (actual))
#define TEST_ASSERT_BIT_HIGH(bit, actual)															TEST_ASSERT__EQUAL__BIT_HIGH((bit), (actual))
#define TEST_ASSERT_BIT_LOW(bit, actual)															TEST_ASSERT__EQUAL__BIT_LOW((bit), (actual))

/* Integer Not Equal To (of all sizes) */
#define TEST_ASSERT_NOT_EQUAL_INT(threshold, actual)												TEST_ASSERT__NOT_EQUAL__INT((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_INT8(threshold, actual)												TEST_ASSERT__NOT_EQUAL__INT8((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_INT16(threshold, actual)												TEST_ASSERT__NOT_EQUAL__INT16((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_INT32(threshold, actual)												TEST_ASSERT__NOT_EQUAL__INT32((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_INT64(threshold, actual)												TEST_ASSERT__NOT_EQUAL__INT64((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_UINT(threshold, actual)												TEST_ASSERT__NOT_EQUAL__UINT((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_UINT8(threshold, actual)												TEST_ASSERT__NOT_EQUAL__UINT8((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_UINT16(threshold, actual)												TEST_ASSERT__NOT_EQUAL__UINT16((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_UINT32(threshold, actual)												TEST_ASSERT__NOT_EQUAL__UINT32((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_UINT64(threshold, actual)												TEST_ASSERT__NOT_EQUAL__UINT64((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_size_t(threshold, actual)												TEST_ASSERT__NOT_EQUAL__size_t((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_HEX8(threshold, actual)												TEST_ASSERT__NOT_EQUAL__HEX8((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_HEX16(threshold, actual)												TEST_ASSERT__NOT_EQUAL__HEX16((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_HEX32(threshold, actual)												TEST_ASSERT__NOT_EQUAL__HEX32((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_HEX64(threshold, actual)												TEST_ASSERT__NOT_EQUAL__HEX64((threshold), (actual))
#define TEST_ASSERT_NOT_EQUAL_CHAR(threshold, actual)												TEST_ASSERT__NOT_EQUAL__CHAR((threshold), (actual))

/* Integer Greater Than/ Less Than (of all sizes) */
#define TEST_ASSERT_GREATER_THAN(threshold, actual)													TEST_ASSERT__GREATER_THAN((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_INT(threshold, actual)												TEST_ASSERT__GREATER_THAN__INT((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_INT8(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT8((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_INT16(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT16((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_INT32(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT32((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_INT64(threshold, actual)											TEST_ASSERT__GREATER_THAN__INT64((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_UINT(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_UINT8(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT8((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_UINT16(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT16((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_UINT32(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT32((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_UINT64(threshold, actual)											TEST_ASSERT__GREATER_THAN__UINT64((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_size_t(threshold, actual)											TEST_ASSERT__GREATER_THAN__size_t((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_HEX8(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX8((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_HEX16(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX16((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_HEX32(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX32((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_HEX64(threshold, actual)											TEST_ASSERT__GREATER_THAN__HEX64((threshold), (actual))
#define TEST_ASSERT_GREATER_THAN_CHAR(threshold, actual)											TEST_ASSERT__GREATER_THAN__CHAR((threshold), (actual))

#define TEST_ASSERT_LESS_THAN(threshold, actual)													TEST_ASSERT__LESS_THAN((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_INT(threshold, actual)												TEST_ASSERT__LESS_THAN__INT((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_INT8(threshold, actual)												TEST_ASSERT__LESS_THAN__INT8((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_INT16(threshold, actual)												TEST_ASSERT__LESS_THAN__INT16((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_INT32(threshold, actual)												TEST_ASSERT__LESS_THAN__INT32((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_INT64(threshold, actual)												TEST_ASSERT__LESS_THAN__INT64((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_UINT(threshold, actual)												TEST_ASSERT__LESS_THAN__UINT((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_UINT8(threshold, actual)												TEST_ASSERT__LESS_THAN__UINT8((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_UINT16(threshold, actual)												TEST_ASSERT__LESS_THAN__UINT16((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_UINT32(threshold, actual)												TEST_ASSERT__LESS_THAN__UINT32((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_UINT64(threshold, actual)												TEST_ASSERT__LESS_THAN__UINT64((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_size_t(threshold, actual)												TEST_ASSERT__LESS_THAN__size_t((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_HEX8(threshold, actual)												TEST_ASSERT__LESS_THAN__HEX8((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_HEX16(threshold, actual)												TEST_ASSERT__LESS_THAN__HEX16((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_HEX32(threshold, actual)												TEST_ASSERT__LESS_THAN__HEX32((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_HEX64(threshold, actual)												TEST_ASSERT__LESS_THAN__HEX64((threshold), (actual))
#define TEST_ASSERT_LESS_THAN_CHAR(threshold, actual)												TEST_ASSERT__LESS_THAN__CHAR((threshold), (actual))

#define TEST_ASSERT_GREATER_OR_EQUAL(threshold, actual)												TEST_ASSERT__GREATER_OR_EQUAL((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT(threshold, actual)											TEST_ASSERT__GREATER_OR_EQUAL__INT((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT8(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__INT8((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT16(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__INT16((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT32(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__INT32((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT64(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__INT64((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__UINT((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT8(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__UINT8((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT16(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__UINT16((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT32(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__UINT32((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT64(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__UINT64((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_size_t(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__size_t((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX8(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__HEX8((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX16(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__HEX16((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX32(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__HEX32((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX64(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__HEX64((threshold), (actual))
#define TEST_ASSERT_GREATER_OR_EQUAL_CHAR(threshold, actual)										TEST_ASSERT__GREATER_OR_EQUAL__CHAR((threshold), (actual))

#define TEST_ASSERT_LESS_OR_EQUAL(threshold, actual)												TEST_ASSERT__LESS_OR_EQUAL((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_INT(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_INT8(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT8((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_INT16(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT16((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_INT32(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT32((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_INT64(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__INT64((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT8(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT8((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT16(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT16((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT32(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT32((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT64(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__UINT64((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_size_t(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__size_t((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX8(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX8((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX16(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX16((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX32(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX32((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX64(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__HEX64((threshold), (actual))
#define TEST_ASSERT_LESS_OR_EQUAL_CHAR(threshold, actual)											TEST_ASSERT__LESS_OR_EQUAL__CHAR((threshold), (actual))

/* Integer Ranges (of all sizes) */
#define TEST_ASSERT_INT_WITHIN(delta, expected, actual)												TEST_ASSERT__WITHIN__INT((delta), (expected), (actual))
#define TEST_ASSERT_INT8_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__INT8((delta), (expected), (actual))
#define TEST_ASSERT_INT16_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__INT16((delta), (expected), (actual))
#define TEST_ASSERT_INT32_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__INT32((delta), (expected), (actual))
#define TEST_ASSERT_INT64_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__INT64((delta), (expected), (actual))
#define TEST_ASSERT_UINT_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__UINT((delta), (expected), (actual))
#define TEST_ASSERT_UINT8_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__UINT8((delta), (expected), (actual))
#define TEST_ASSERT_UINT16_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__UINT16((delta), (expected), (actual))
#define TEST_ASSERT_UINT32_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__UINT32((delta), (expected), (actual))
#define TEST_ASSERT_UINT64_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__UINT64((delta), (expected), (actual))
#define TEST_ASSERT_size_t_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__size_t((delta), (expected), (actual))
#define TEST_ASSERT_HEX_WITHIN(delta, expected, actual)												TEST_ASSERT__WITHIN__HEX((delta), (expected), (actual))
#define TEST_ASSERT_HEX8_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__HEX8((delta), (expected), (actual))
#define TEST_ASSERT_HEX16_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__HEX16((delta), (expected), (actual))
#define TEST_ASSERT_HEX32_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__HEX32((delta), (expected), (actual))
#define TEST_ASSERT_HEX64_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__HEX64((delta), (expected), (actual))
#define TEST_ASSERT_CHAR_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__CHAR((delta), (expected), (actual))

/* Integer Array Ranges (of all sizes) */
#define TEST_ASSERT_INT_ARRAY_WITHIN(delta, expected, actual, num_elements)							TEST_ASSERT__WITHIN_ARRAY__INT((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_INT8_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__INT8((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_INT16_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__INT16((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_INT32_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__INT32((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_INT64_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__INT64((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_UINT_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__UINT((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_UINT8_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__UINT8((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_UINT16_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__UINT16((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_UINT32_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__UINT32((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_UINT64_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__UINT64((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_size_t_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__size_t((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_HEX_ARRAY_WITHIN(delta, expected, actual, num_elements)							TEST_ASSERT__WITHIN_ARRAY__HEX((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_HEX8_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__HEX8((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_HEX16_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__HEX16((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_HEX32_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__HEX32((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_HEX64_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__HEX64((delta), (expected), (actual), (num_elements))
#define TEST_ASSERT_CHAR_ARRAY_WITHIN(delta, expected, actual, num_elements)						TEST_ASSERT__WITHIN_ARRAY__CHAR((delta), (expected), (actual), (num_elements))


/* Structs and Strings */
#define TEST_ASSERT_EQUAL_PTR(expected, actual)														TEST_ASSERT__EQUAL__PTR((expected), (actual))
#define TEST_ASSERT_EQUAL_STRING(expected, actual)													TEST_ASSERT__EQUAL__STRING((expected), (actual))
#define TEST_ASSERT_EQUAL_STRING_LEN(expected, actual, len)											TEST_ASSERT__EQUAL__STRING_LEN((expected), (actual), (len))
#define TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)												TEST_ASSERT__EQUAL__MEMORY((expected), (actual), (len))

/* Arrays */
#define TEST_ASSERT_EQUAL_INT_ARRAY(expected, actual, num_elements)									TEST_ASSERT__EQUAL_ARRAY__INT((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_INT8_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__INT8((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_INT16_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__INT16((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_INT32_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__INT32((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_INT64_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__INT64((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_UINT_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__UINT((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_UINT8_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__UINT8((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_UINT16_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__UINT16((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_UINT32_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__UINT32((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_UINT64_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__UINT64((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_size_t_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__size_t((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_HEX_ARRAY(expected, actual, num_elements)									TEST_ASSERT__EQUAL_ARRAY__HEX((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__HEX8((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_HEX16_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__HEX16((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_HEX32_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__HEX32((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_HEX64_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__HEX64((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_PTR_ARRAY(expected, actual, num_elements)									TEST_ASSERT__EQUAL_ARRAY__PTR((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_STRING_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__STRING((expected), (actual), (num_elements))
#define TEST_ASSERT_EQUAL_MEMORY_ARRAY(expected, actual, len, num_elements)							TEST_ASSERT__EQUAL_ARRAY__MEMORY((expected), (actual), (len), (num_elements))
#define TEST_ASSERT_EQUAL_CHAR_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__CHAR((expected), (actual), (num_elements))

/* Arrays Compared To Single Value */
#define TEST_ASSERT_EACH_EQUAL_INT(expected, actual, num_elements)									TEST_ASSERT__EQUAL_EACH__INT((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_INT8(expected, actual, num_elements)									TEST_ASSERT__EQUAL_EACH__INT8((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_INT16(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__INT16((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_INT32(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__INT32((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_INT64(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__INT64((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_UINT(expected, actual, num_elements)									TEST_ASSERT__EQUAL_EACH__UINT((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_UINT8(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__UINT8((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_UINT16(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__UINT16((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_UINT32(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__UINT32((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_UINT64(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__UINT64((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_size_t(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__size_t((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_HEX(expected, actual, num_elements)									TEST_ASSERT__EQUAL_EACH__HEX((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_HEX8(expected, actual, num_elements)									TEST_ASSERT__EQUAL_EACH__HEX8((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_HEX16(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__HEX16((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_HEX32(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__HEX32((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_HEX64(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__HEX64((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_PTR(expected, actual, num_elements)									TEST_ASSERT__EQUAL_EACH__PTR((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_STRING(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__STRING((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_MEMORY(expected, actual, len, num_elements)							TEST_ASSERT__EQUAL_EACH__MEMORY((expected), (actual), (len), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_CHAR(expected, actual, num_elements)									TEST_ASSERT__EQUAL_EACH__CHAR((expected), (actual), (num_elements))

/* Floating Point (If Enabled) */
#define TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__FLOAT((delta), (expected), (actual))
#define TEST_ASSERT_EQUAL_FLOAT(expected, actual)													TEST_ASSERT__EQUAL__FLOAT((expected), (actual))
#define TEST_ASSERT_EQUAL_FLOAT_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__FLOAT((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_FLOAT(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__FLOAT((expected), (actual), (num_elements))
#define TEST_ASSERT_FLOAT_IS_INF(actual)															TEST_ASSERT__FLOAT__IS_INF((actual))
#define TEST_ASSERT_FLOAT_IS_NEG_INF(actual)														TEST_ASSERT__FLOAT__IS_NEG_INF((actual))
#define TEST_ASSERT_FLOAT_IS_NAN(actual)															TEST_ASSERT__FLOAT__IS_NAN((actual))
#define TEST_ASSERT_FLOAT_IS_DETERMINATE(actual)													TEST_ASSERT__FLOAT__IS_DETERMINATE((actual))
#define TEST_ASSERT_FLOAT_IS_NOT_INF(actual)														TEST_ASSERT__FLOAT__IS_NOT_INF((actual))
#define TEST_ASSERT_FLOAT_IS_NOT_NEG_INF(actual)													TEST_ASSERT__FLOAT__IS_NOT_NEG_INF((actual))
#define TEST_ASSERT_FLOAT_IS_NOT_NAN(actual)														TEST_ASSERT__FLOAT__IS_NOT_NAN((actual))
#define TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE(actual)												TEST_ASSERT__FLOAT__IS_NOT_DETERMINATE((actual))

/* Double (If Enabled) */
#define TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)											TEST_ASSERT__WITHIN__DOUBLE((delta), (expected), (actual))
#define TEST_ASSERT_EQUAL_DOUBLE(expected, actual)													TEST_ASSERT__EQUAL__DOUBLE((expected), (actual))
#define TEST_ASSERT_EQUAL_DOUBLE_ARRAY(expected, actual, num_elements)								TEST_ASSERT__EQUAL_ARRAY__DOUBLE((expected), (actual), (num_elements))
#define TEST_ASSERT_EACH_EQUAL_DOUBLE(expected, actual, num_elements)								TEST_ASSERT__EQUAL_EACH__DOUBLE((expected), (actual), (num_elements))
#define TEST_ASSERT_DOUBLE_IS_INF(actual)															TEST_ASSERT__DOUBLE__IS_INF((actual))
#define TEST_ASSERT_DOUBLE_IS_NEG_INF(actual)														TEST_ASSERT__DOUBLE__IS_NEG_INF((actual))
#define TEST_ASSERT_DOUBLE_IS_NAN(actual)															TEST_ASSERT__DOUBLE__IS_NAN((actual))
#define TEST_ASSERT_DOUBLE_IS_DETERMINATE(actual)													TEST_ASSERT__DOUBLE__IS_DETERMINATE((actual))
#define TEST_ASSERT_DOUBLE_IS_NOT_INF(actual)														TEST_ASSERT__DOUBLE__IS_NOT_INF((actual))
#define TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF(actual)													TEST_ASSERT__DOUBLE__IS_NOT_NEG_INF((actual))
#define TEST_ASSERT_DOUBLE_IS_NOT_NAN(actual)														TEST_ASSERT__DOUBLE__IS_NOT_NAN((actual))
#define TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE(actual)												TEST_ASSERT__DOUBLE__IS_NOT_DETERMINATE((actual))

/* Shorthand */
#ifdef UNITY_SHORTHAND_AS_OLD
#define TEST_ASSERT_EQUAL(expected, actual)															TEST_ASSERT__EQUAL((expected), (actual))
#define TEST_ASSERT_NOT_EQUAL(expected, actual)														TEST_ASSERT__NOT_EQUAL((expected), (actual))
#endif	/* UNITY_SHORTHAND_AS_OLD */
#ifdef UNITY_SHORTHAND_AS_INT
#define TEST_ASSERT_EQUAL(expected, actual)															TEST_ASSERT__EQUAL((expected), (actual))
#define TEST_ASSERT_NOT_EQUAL(expected, actual)														TEST_ASSERT__NOT_EQUAL((expected), (actual))
#endif	/* UNITY_SHORTHAND_AS_INT */
#ifdef UNITY_SHORTHAND_AS_MEM
#define TEST_ASSERT_EQUAL(expected, actual)															TEST_ASSERT__EQUAL((expected), (actual))
#define TEST_ASSERT_NOT_EQUAL(expected, actual)														TEST_ASSERT__NOT_EQUAL((expected), (actual))
#endif	/* UNITY_SHORTHAND_AS_MEM */
#ifdef UNITY_SHORTHAND_AS_RAW
#define TEST_ASSERT_EQUAL(expected, actual)															TEST_ASSERT__EQUAL((expected), (actual))
#define TEST_ASSERT_NOT_EQUAL(expected, actual)														TEST_ASSERT__NOT_EQUAL((expected), (actual))
#endif	/* UNITY_SHORTHAND_AS_RAW */
#ifdef UNITY_SHORTHAND_AS_NONE
#define TEST_ASSERT_EQUAL(expected, actual)															TEST_ASSERT__EQUAL((expected), (actual))
#define TEST_ASSERT_NOT_EQUAL(expected, actual)														TEST_ASSERT__NOT_EQUAL((expected), (actual))
#endif	/* UNITY_SHORTHAND_AS_NONE */

/*-------------------------------------------------------
 * Test Asserts (with additional messages)
 *-------------------------------------------------------*/

/* Boolean */
#define TEST_ASSERT_MESSAGE(condition, message)														TEST_ASSERT__MESSAGE((condition), (message))
#define TEST_ASSERT_TRUE_MESSAGE(condition, message)												TEST_ASSERT__TRUE_MESSAGE((condition), (message))
#define TEST_ASSERT_UNLESS_MESSAGE(condition, message)												TEST_ASSERT__UNLESS_MESSAGE((condition), (message))
#define TEST_ASSERT_FALSE_MESSAGE(condition, message)												TEST_ASSERT__FALSE_MESSAGE((condition), (message))
#define TEST_ASSERT_NULL_MESSAGE(pointer, message)													TEST_ASSERT__NULL_MESSAGE((pointer), (message))
#define TEST_ASSERT_NOT_NULL_MESSAGE(pointer, message)												TEST_ASSERT__NOT_NULL_MESSAGE((pointer), (message))
#define TEST_ASSERT_EMPTY_MESSAGE(pointer, message)													TEST_ASSERT__EMPTY_MESSAGE((pointer), (message))
#define TEST_ASSERT_NOT_EMPTY_MESSAGE(pointer, message)												TEST_ASSERT__NOT_EMPTY_MESSAGE((pointer), (message))

/* Integers (of all sizes) */
#define TEST_ASSERT_EQUAL_INT_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__INT_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_INT8_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__INT8_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_INT16_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__INT16_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_INT32_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__INT32_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_INT64_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__INT64_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_UINT_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__UINT_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_UINT8_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__UINT8_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_UINT16_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__UINT16_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_UINT32_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__UINT32_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_UINT64_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__UINT64_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_size_t_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__size_t_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_HEX_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__HEX_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_HEX8_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__HEX8_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_HEX16_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__HEX16_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_HEX32_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__HEX32_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_HEX64_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__HEX64_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_BITS_MESSAGE(mask, expected, actual, message)									TEST_ASSERT__EQUAL__BITS_MESSAGE((mask), (expected), (actual), (message))
#define TEST_ASSERT_BITS_HIGH_MESSAGE(mask, actual, message)										TEST_ASSERT__EQUAL__BITS_HIGH_MESSAGE((mask), (actual), (message))
#define TEST_ASSERT_BITS_LOW_MESSAGE(mask, actual, message)											TEST_ASSERT__EQUAL__BITS_LOW_MESSAGE((mask), (actual), (message))
#define TEST_ASSERT_BIT_HIGH_MESSAGE(bit, actual, message)											TEST_ASSERT__EQUAL__BIT_HIGH_MESSAGE((bit), (actual), (message))
#define TEST_ASSERT_BIT_LOW_MESSAGE(bit, actual, message)											TEST_ASSERT__EQUAL__BIT_LOW_MESSAGE((bit), (actual), (message))
#define TEST_ASSERT_EQUAL_CHAR_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__CHAR_MESSAGE((expected), (actual), (message))

/* Integer Not Equal To (of all sizes) */
#define TEST_ASSERT_NOT_EQUAL_INT_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_INT8_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_INT16_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_INT32_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_INT64_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__INT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_UINT_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__UINT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_UINT8_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__UINT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_UINT16_MESSAGE(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__UINT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_UINT32_MESSAGE(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__UINT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_UINT64_MESSAGE(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__UINT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_size_t_MESSAGE(threshold, actual, message)							TEST_ASSERT__NOT_EQUAL__size_t_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_HEX8_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_HEX16_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_HEX32_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_HEX64_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__HEX64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_CHAR_MESSAGE(threshold, actual, message)								TEST_ASSERT__NOT_EQUAL__CHAR_MESSAGE((threshold), (actual), (message))


/* Integer Greater Than/ Less Than (of all sizes) */
#define TEST_ASSERT_GREATER_THAN_MESSAGE(threshold, actual, message)								TEST_ASSERT__GREATER_THAN__MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_INT_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__INT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_INT8_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__INT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_INT16_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__INT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_INT32_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__INT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_INT64_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__INT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_UINT_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_UINT8_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_UINT16_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_UINT32_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_UINT64_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__UINT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_size_t_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__size_t_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_HEX8_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__HEX8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_HEX16_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__HEX16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_HEX32_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__HEX32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_HEX64_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__HEX64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_THAN_CHAR_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_THAN__CHAR_MESSAGE((threshold), (actual), (message))

#define TEST_ASSERT_LESS_THAN_MESSAGE(threshold, actual, message)									TEST_ASSERT__LESS_THAN__MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_INT_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_INT8_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_INT16_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_INT32_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_INT64_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__INT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_UINT_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__UINT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_UINT8_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__UINT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_UINT16_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_THAN__UINT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_UINT32_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_THAN__UINT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_UINT64_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_THAN__UINT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_size_t_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_THAN__size_t_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_HEX8_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_HEX16_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_HEX32_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_HEX64_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__HEX64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_THAN_CHAR_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_THAN__CHAR_MESSAGE((threshold), (actual), (message))

#define TEST_ASSERT_GREATER_OR_EQUAL_MESSAGE(threshold, actual, message)							TEST_ASSERT__GREATER_OR_EQUAL__MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__INT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT8_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__INT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT16_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__INT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT32_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__INT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_INT64_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__INT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__UINT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT8_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__UINT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT16_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__UINT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__UINT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_UINT64_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__UINT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_size_t_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__size_t_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX8_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__HEX8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX16_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__HEX16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX32_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__HEX32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_HEX64_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__HEX64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_GREATER_OR_EQUAL_CHAR_MESSAGE(threshold, actual, message)						TEST_ASSERT__GREATER_OR_EQUAL__CHAR_MESSAGE((threshold), (actual), (message))

#define TEST_ASSERT_LESS_OR_EQUAL_MESSAGE(threshold, actual, message)								TEST_ASSERT__LESS_OR_EQUAL__MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_INT_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__INT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_INT8_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__INT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_INT16_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__INT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_INT32_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__INT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_INT64_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__INT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__UINT_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT8_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__UINT8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT16_MESSAGE(threshold, actual, message)						TEST_ASSERT__LESS_OR_EQUAL__UINT16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT32_MESSAGE(threshold, actual, message)						TEST_ASSERT__LESS_OR_EQUAL__UINT32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_UINT64_MESSAGE(threshold, actual, message)						TEST_ASSERT__LESS_OR_EQUAL__UINT64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_size_t_MESSAGE(threshold, actual, message)						TEST_ASSERT__LESS_OR_EQUAL__size_t_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX8_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__HEX8_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX16_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__HEX16_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX32_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__HEX32_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_HEX64_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__HEX64_MESSAGE((threshold), (actual), (message))
#define TEST_ASSERT_LESS_OR_EQUAL_CHAR_MESSAGE(threshold, actual, message)							TEST_ASSERT__LESS_OR_EQUAL__CHAR_MESSAGE((threshold), (actual), (message))

/* Integer Ranges (of all sizes) */
#define TEST_ASSERT_INT_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__INT_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_INT8_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__INT8_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_INT16_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__INT16_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_INT32_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__INT32_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_INT64_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__INT64_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_UINT_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__UINT_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_UINT8_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__UINT8_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_UINT16_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__UINT16_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_UINT32_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__UINT32_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_UINT64_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__UINT64_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_size_t_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__size_t_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_HEX_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__HEX_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_HEX8_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__HEX8_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_HEX16_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__HEX16_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_HEX32_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__HEX32_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_HEX64_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__HEX64_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_CHAR_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__CHAR_MESSAGE((delta), (expected), (actual), (message))

/* Integer Array Ranges (of all sizes) */
#define TEST_ASSERT_INT_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_INT8_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT8_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_INT16_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT16_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_INT32_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT32_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_INT64_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__INT64_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_UINT_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__UINT_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_UINT8_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__UINT8_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_UINT16_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__UINT16_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_UINT32_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__UINT32_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_UINT64_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message) 	TEST_ASSERT__WITHIN_ARRAY__UINT64_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_size_t_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__size_t_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_HEX_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_HEX8_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX8_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_HEX16_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX16_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_HEX32_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX32_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_HEX64_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__HEX64_MESSAGE((delta), (expected), (actual), (num_elements), (message))
#define TEST_ASSERT_CHAR_ARRAY_WITHIN_MESSAGE(delta, expected, actual, num_elements, message)		TEST_ASSERT__WITHIN_ARRAY__CHAR_MESSAGE((delta), (expected), (actual), (num_elements), (message))


/* Structs and Strings */
#define TEST_ASSERT_EQUAL_PTR_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__PTR_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__STRING_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(expected, actual, len, message)						TEST_ASSERT__EQUAL__STRING_LEN_MESSAGE((expected), (actual), (len), (message))
#define TEST_ASSERT_EQUAL_MEMORY_MESSAGE(expected, actual, len, message)							TEST_ASSERT__EQUAL__MEMORY_MESSAGE((expected), (actual), (len), (message))

/* Arrays */
#define TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__INT_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__INT8_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__INT16_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__INT32_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__INT64_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__UINT_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__UINT8_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__UINT16_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__UINT32_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__UINT64_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_size_t_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__size_t_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__HEX_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__HEX8_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__HEX16_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__HEX32_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__HEX64_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__PTR_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__STRING_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE(expected, actual, len, num_elements, message)		TEST_ASSERT__EQUAL_ARRAY__MEMORY_MESSAGE((expected), (actual), (len), (num_elements), (message))
#define TEST_ASSERT_EQUAL_CHAR_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__CHAR_MESSAGE((expected), (actual), (num_elements), (message))

/* Arrays Compared To Single Value*/
#define TEST_ASSERT_EACH_EQUAL_INT_MESSAGE(expected, actual, num_elements, message)					TEST_ASSERT__EQUAL_EACH__INT_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_INT8_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__INT8_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_INT16_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__INT16_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_INT32_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__INT32_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_INT64_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__INT64_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_UINT_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__UINT_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_UINT8_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__UINT8_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_UINT16_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__UINT16_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_UINT32_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__UINT32_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_UINT64_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__UINT64_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_size_t_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__size_t_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_HEX_MESSAGE(expected, actual, num_elements, message)					TEST_ASSERT__EQUAL_EACH__HEX_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_HEX8_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__HEX8_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_HEX16_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__HEX16_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_HEX32_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__HEX32_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_HEX64_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__HEX64_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_PTR_MESSAGE(expected, actual, num_elements, message)					TEST_ASSERT__EQUAL_EACH__PTR_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_STRING_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__STRING_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_MEMORY_MESSAGE(expected, actual, len, num_elements, message)			TEST_ASSERT__EQUAL_EACH__MEMORY_MESSAGE((expected), (actual), (len), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_CHAR_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__CHAR_MESSAGE((expected), (actual), (num_elements), (message))

/* Floating Point (If Enabled) */
#define TEST_ASSERT_FLOAT_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__FLOAT_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_EQUAL_FLOAT_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__FLOAT_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__FLOAT_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_FLOAT_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__FLOAT_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_FLOAT_IS_INF_MESSAGE(actual, message)											TEST_ASSERT__FLOAT__IS_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE(actual, message)										TEST_ASSERT__FLOAT__IS_NEG_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_FLOAT_IS_NAN_MESSAGE(actual, message)											TEST_ASSERT__FLOAT__IS_NAN_MESSAGE((actual), (message))
#define TEST_ASSERT_FLOAT_IS_DETERMINATE_MESSAGE(actual, message)									TEST_ASSERT__FLOAT__IS_DETERMINATE_MESSAGE((actual), (message))
#define TEST_ASSERT_FLOAT_IS_NOT_INF_MESSAGE(actual, message)										TEST_ASSERT__FLOAT__IS_NOT_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_FLOAT_IS_NOT_NEG_INF_MESSAGE(actual, message)									TEST_ASSERT__FLOAT__IS_NOT_NEG_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_FLOAT_IS_NOT_NAN_MESSAGE(actual, message)										TEST_ASSERT__FLOAT__IS_NOT_NAN_MESSAGE((actual), (message))
#define TEST_ASSERT_FLOAT_IS_NOT_DETERMINATE_MESSAGE(actual, message)								TEST_ASSERT__FLOAT__IS_NOT_DETERMINATE_MESSAGE((actual), (message))

/* Double (If Enabled) */
#define TEST_ASSERT_DOUBLE_WITHIN_MESSAGE(delta, expected, actual, message)							TEST_ASSERT__WITHIN__DOUBLE_MESSAGE((delta), (expected), (actual), (message))
#define TEST_ASSERT_EQUAL_DOUBLE_MESSAGE(expected, actual, message)									TEST_ASSERT__EQUAL__DOUBLE_MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_ARRAY__DOUBLE_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_EACH_EQUAL_DOUBLE_MESSAGE(expected, actual, num_elements, message)				TEST_ASSERT__EQUAL_EACH__DOUBLE_MESSAGE((expected), (actual), (num_elements), (message))
#define TEST_ASSERT_DOUBLE_IS_INF_MESSAGE(actual, message)											TEST_ASSERT__DOUBLE__IS_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE(actual, message)										TEST_ASSERT__DOUBLE__IS_NEG_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_DOUBLE_IS_NAN_MESSAGE(actual, message)											TEST_ASSERT__DOUBLE__IS_NAN_MESSAGE((actual), (message))
#define TEST_ASSERT_DOUBLE_IS_DETERMINATE_MESSAGE(actual, message)									TEST_ASSERT__DOUBLE__IS_DETERMINATE_MESSAGE((actual), (message))
#define TEST_ASSERT_DOUBLE_IS_NOT_INF_MESSAGE(actual, message)										TEST_ASSERT__DOUBLE__IS_NOT_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_DOUBLE_IS_NOT_NEG_INF_MESSAGE(actual, message)									TEST_ASSERT__DOUBLE__IS_NOT_NEG_INF_MESSAGE((actual), (message))
#define TEST_ASSERT_DOUBLE_IS_NOT_NAN_MESSAGE(actual, message)										TEST_ASSERT__DOUBLE__IS_NOT_NAN_MESSAGE((actual), (message))
#define TEST_ASSERT_DOUBLE_IS_NOT_DETERMINATE_MESSAGE(actual, message)								TEST_ASSERT__DOUBLE__IS_NOT_DETERMINATE_MESSAGE((actual), (message))

/* Shorthand */
#ifdef UNITY_SHORTHAND_AS_OLD
#define TEST_ASSERT_EQUAL_MESSAGE(expected, actual, message)										TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_MESSAGE(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_OLD */
#ifdef UNITY_SHORTHAND_AS_INT
#define TEST_ASSERT_EQUAL_MESSAGE(expected, actual, message)										TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_MESSAGE(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_INT */
#ifdef  UNITY_SHORTHAND_AS_MEM
#define TEST_ASSERT_EQUAL_MESSAGE(expected, actual, message)										TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_MESSAGE(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_MEM */
#ifdef  UNITY_SHORTHAND_AS_RAW
#define TEST_ASSERT_EQUAL_MESSAGE(expected, actual, message)										TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_MESSAGE(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_RAW */
#ifdef UNITY_SHORTHAND_AS_NONE
#define TEST_ASSERT_EQUAL_MESSAGE(expected, actual, message)										TEST_ASSERT__EQUAL__MESSAGE((expected), (actual), (message))
#define TEST_ASSERT_NOT_EQUAL_MESSAGE(expected, actual, message)									TEST_ASSERT__NOT_EQUAL__MESSAGE((expected), (actual), (message))
#endif	/* UNITY_SHORTHAND_AS_NONE */

#ifdef __cplusplus
}
#endif	/* __cplusplus */

#endif	/* UNITY_LEGACY_H */
